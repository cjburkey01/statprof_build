<script type="text/hyperscript">
    behavior ZScoreTextUpdate
        on keyup or input
            set local mean to the value of #z_score_calc_mean
            set local stdev to the value of #z_score_calc_stdev
            set local x to the value of #z_score_calc_x

            if has_val(mean) and has_val(stdev) and has_val(x)
                set local z_score to z_score_fn(mean, stdev, x)
                set the value of #z_score_output to z_score.toFixed(6)
            end
        end
    end

    behavior NormCalcTextUpdate
        on keyup or input
            set local mean to the value of #norm_prob_calc_mean
            set local stdev to the value of #norm_prob_calc_stdev
            set local lt to the value of #norm_prob_calc_lt
            set local gt to the value of #norm_prob_calc_gt

            if has_val(mean) and has_val(stdev)
                if has_val(lt) and has_val(gt)
                    set local gt_prob to norm_prob_cdf_fn(mean, stdev, gt)
                    set local lt_prob to norm_prob_cdf_fn(mean, stdev, lt)

                    if gt <= lt
                        -- If gt is less than lt, we want inner probability.
                        set the value of #norm_prob_output
                                to (lt_prob - gt_prob).toFixed(6)
                    else
                        -- Otherwise, we want outer probability.
                        set the value of #norm_prob_output
                                to (lt_prob + (1.0 - gt_prob)).toFixed(6)
                    end
                else if has_val(lt)
                    set the value of #norm_prob_output
                            to norm_prob_cdf_fn(mean, stdev, lt).toFixed(6)
                else if has_val(gt)
                    set the value of #norm_prob_output
                            to (1 - norm_prob_cdf_fn(mean, stdev, gt)).toFixed(6)
                end
            end
        end
    end

    behavior SampleNormCalcTextUpdate
        on keyup or input
            set local mean to the value of #sample_norm_prob_calc_mean
            set local stdev to the value of #sample_norm_prob_calc_stdev
            set local n to the value of #sample_norm_prob_calc_n
            set local lt to the value of #sample_norm_prob_calc_lt
            set local gt to the value of #sample_norm_prob_calc_gt

            set local stdev to stdev / Math.sqrt(n)
            set local n to Math.max(Math.floor(n), 1)

            if has_val(mean) and has_val(stdev) and has_val(n)
                if has_val(lt) and has_val(gt)
                    set local gt_prob to norm_prob_cdf_fn(mean, stdev, gt)
                    set local lt_prob to norm_prob_cdf_fn(mean, stdev, lt)
                    set the value of #sample_norm_prob_output
                            to Math.abs(lt_prob - gt_prob).toFixed(6)
                else if has_val(lt)
                    set the value of #sample_norm_prob_output
                            to norm_prob_cdf_fn(mean, stdev, lt).toFixed(6)
                else if has_val(gt)
                    set the value of #sample_norm_prob_output
                            to (1.0 - norm_prob_cdf_fn(mean, stdev, gt)).toFixed(6)
                end
            end
        end
    end

    behavior InvNormCalcTextUpdate
        on keyup or input
            set local mean to the value of #inv_norm_prob_calc_mean
            set local stdev to the value of #inv_norm_prob_calc_stdev
            set local p to the value of #inv_norm_prob_calc_p

            set local p to Math.min(Math.max(p, 0.0), 1.0)

            if has_val(mean) and has_val(stdev) and has_val(p)
                set local lt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, p)) as Float
                set local gt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, 1.0 - p)) as Float

                set the value of #inv_norm_prob_lt to lt.toFixed(6)
                set the value of #inv_norm_prob_gt to gt.toFixed(6)

                set local half_p to (1.0 - p) / 2.0

                set local btwn_gt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, half_p)) as Float
                set local btwn_lt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, 1.0 - half_p)) as Float

                set the value of #inv_norm_prob_btwn1 to btwn_gt.toFixed(6)
                set the value of #inv_norm_prob_btwn2 to btwn_lt.toFixed(6)

                set local half_p2 to p / 2.0

                set local out_lt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, half_p2)) as Float
                set local out_gt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, 1.0 - half_p2)) as Float

                set the value of #inv_norm_prob_out1 to out_lt.toFixed(6)
                set the value of #inv_norm_prob_out2 to out_gt.toFixed(6)
            end
        end
    end

    behavior InvNormCalcTextUpdate
        on keyup or input
            set local mean to the value of #inv_norm_prob_calc_mean
            set local stdev to the value of #inv_norm_prob_calc_stdev
            set local p to the value of #inv_norm_prob_calc_p

            set local p to Math.min(Math.max(p, 0.0), 1.0)

            if has_val(mean) and has_val(stdev) and has_val(p)
                set local lt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, p)) as Float
                set local gt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, 1.0 - p)) as Float

                set the value of #inv_norm_prob_lt to lt.toFixed(6)
                set the value of #inv_norm_prob_gt to gt.toFixed(6)

                set local half_p to (1.0 - p) / 2.0

                set local btwn_gt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, half_p)) as Float
                set local btwn_lt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, 1.0 - half_p)) as Float

                set the value of #inv_norm_prob_btwn1 to btwn_gt.toFixed(6)
                set the value of #inv_norm_prob_btwn2 to btwn_lt.toFixed(6)

                set local half_p2 to p / 2.0

                set local out_lt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, half_p2)) as Float
                set local out_gt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, 1.0 - half_p2)) as Float

                set the value of #inv_norm_prob_out1 to out_lt.toFixed(6)
                set the value of #inv_norm_prob_out2 to out_gt.toFixed(6)
            end
        end
    end

    behavior SampleInvNormCalcTextUpdate
        on keyup or input
            set local mean to the value of #sample_inv_norm_prob_calc_mean
            set local stdev to the value of #sample_inv_norm_prob_calc_stdev
            set local n to the value of #sample_inv_norm_prob_calc_n
            set local p to the value of #sample_inv_norm_prob_calc_p

            set local stdev to stdev / Math.sqrt(n)
            set local n to Math.max(Math.floor(n), 1)
            set local p to Math.min(Math.max(p, 0.0), 1.0)

            if has_val(mean) and has_val(stdev) and has_val(p)
                set local lt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, p)) as Float
                set local gt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, 1.0 - p)) as Float

                set the value of #sample_inv_norm_prob_lt to lt.toFixed(6)
                set the value of #sample_inv_norm_prob_gt to gt.toFixed(6)

                set local half_p to (1.0 - p) / 2.0

                set local btwn_gt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, half_p)) as Float
                set local btwn_lt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, 1.0 - half_p)) as Float

                set the value of #sample_inv_norm_prob_btwn1 to btwn_gt.toFixed(6)
                set the value of #sample_inv_norm_prob_btwn2 to btwn_lt.toFixed(6)

                set local half_p2 to p / 2.0

                set local out_lt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, half_p2)) as Float
                set local out_gt to
                    x_from_z(mean, stdev, inv_norm_cdf_fn(mean, stdev, 1.0 - half_p2)) as Float

                set the value of #sample_inv_norm_prob_out1 to out_lt.toFixed(6)
                set the value of #sample_inv_norm_prob_out2 to out_gt.toFixed(6)
            end
        end
    end

    behavior TypeTwoMeanTextUpdate
        on keyup or input or changed
            -- TODO: DO THIS ONE!
            log "Changed!"
        end
    end

    behavior TScoreTextUpdate
        on keyup or input
            set local mean to the value of #t_score_calc_mean
            set local stdev to the value of #t_score_calc_stdev
            set local n to the value of #t_score_calc_n
            set local x to the value of #t_score_calc_x

            set local n to Math.max(Math.floor(n), 1)

            if has_val(mean) and has_val(stdev) and has_val(n) and has_val(x)
                set local t_score to t_score_fn(mean, stdev, n, x)
                set #t_score_output's value to t_score.toFixed(6)
            end
        end
    end

    behavior TInvNormCalcTextUpdate
        on keyup or input
            set local n to the value of #t_inv_norm_prob_calc_n
            set local p to the value of #t_inv_norm_prob_calc_p

            set local n to Math.max(Math.floor(n), 2)
            set local p to Math.min(Math.max(p, 0.0), 1.0)

            if has_val(n) and has_val(p)
                set local lt to
                    inv_t_cdf_fn(n, p) as Float
                set local gt to
                    inv_t_cdf_fn(n, 1.0 - p) as Float

                set the value of #t_inv_norm_prob_lt to lt.toFixed(6)
                set the value of #t_inv_norm_prob_gt to gt.toFixed(6)

                set local half_p to (1.0 - p) / 2.0

                set local btwn_gt to inv_t_cdf_fn(n, half_p) as Float
                set local btwn_lt to inv_t_cdf_fn(n, 1.0 - half_p) as Float

                set the value of #t_inv_norm_prob_btwn1 to btwn_gt.toFixed(6)
                set the value of #t_inv_norm_prob_btwn2 to btwn_lt.toFixed(6)

                set local half_p2 to p / 2.0

                set local out_lt to inv_t_cdf_fn(n, half_p2) as Float
                set local out_gt to inv_t_cdf_fn(n, 1.0 - half_p2) as Float

                set the value of #t_inv_norm_prob_out1 to out_lt.toFixed(6)
                set the value of #t_inv_norm_prob_out2 to out_gt.toFixed(6)
            end
        end
    end
</script>